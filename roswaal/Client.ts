import { Reassign } from "TiFShared/lib/HelperTypes"
import { TestAppLaunchConfig, launchApp } from "./Launch"
import { RoswaalTestCase, RoswaalTestCaseResult } from "./TestCase"

export type RoswaalClientUploadResults = Reassign<
  RoswaalTestCaseResult,
  "error",
  {
    message: string
    stackTrace?: string
  } | null
>

/**
 * A class that uploads progress on each {@link RoswaalTestCase} to the roswaal tool.
 *
 * A client can be constructed with or without an `uploadURL`. The latter case is convenient for
 * running the tests locally where there is no need to upload the results. Instead, a warning is
 * logged over uploading the results.
 *
 * This class shouldn't need to be used directly, as its usage should be generated by roswaal.
 */
export class RoswaalClient {
  private readonly results = [] as RoswaalTestCaseResult[]

  // eslint-disable-next-line no-useless-constructor
  constructor(private readonly uploadURL?: string) {}

  /**
   * Runs the specified {@link RoswaalTestCase} and tracks its result.
   *
   * If the test case returns an error in its report, then that error is thrown, but the test
   * result is still tracked by this client. This allows the failure to be reported to jest.
   *
   * @param testCase A {@link RoswaalTestCase}
   * @param launch A function to the launch the app for testing purposes.
   */
  async run(
    testCase: RoswaalTestCase,
    launch: (config?: TestAppLaunchConfig) => Promise<void> = launchApp
  ) {
    const result = await testCase.run(launch)
    this.results.push(result)
    if (result.error) throw result.error
  }

  /**
   * Uploads the progress of every test run to the roswaal tool if this client was constructed with
   * an upload URL.
   *
   * If this client has no specified upload URL, then a warning log is issued.
   *
   * This should only need to be called in the global teardown.
   */
  async upload() {
    if (!this.uploadURL) {
      console.warn(
        "No roswaal upload URL specified, test results will not be uploaded. To specify an upload URL, set the ROSWAAL_UPLOAD_RESULTS_URL accordingly."
      )
      return
    }
    const uploadableResults = this.results.map((result) => ({
      ...result,
      error: result.error
        ? { message: result.error.message, stackTrace: result.error.stack }
        : null
    }))
    await fetch(this.uploadURL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ results: uploadableResults })
    })
  }
}

/**
 * A singleton {@link RoswaalClient}.
 *
 * This should generally only be used by generated test code.
 */
export const roswaalClient = new RoswaalClient(
  process.env.ROSWAAL_UPLOAD_RESULTS_URL
)
