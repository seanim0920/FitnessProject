type LocationEvent {
  latitude: Float
  longitude: Float
}

input LocationEventInput {
  latitude: Float
  longitude: Float
}
input groups {
  latitude: Float
  longitude: Float
}

"""
This data type is used on the feed screen, group screen and message screen.
The "postsByChannel" query is used to find posts belonging to a specific group or directed to a specific user.
"""
type Event @model(timestamps: { createdAt: "createdAt", updatedAt: "updatedAt" }, subscriptions: null) 
@searchable
@auth(
  rules: [
      { allow: owner, ownerField: "userId" },
      { allow: private, provider: iam, operations: [create, read, update, delete] },
      { allow: groups, groups: ["Admins"], operations: [create, read, update, delete] },
  ]
)
@key(fields: ["createdAt", "userId"])
@key(name: "ByUser", fields: ["userId", "createdAt"], queryField: "eventsByUser")
@key(name: "ByDate", fields: ["startDateTime", "createdAt"], queryField: "eventsByDate")
@key(name: "ByHost", fields: ["host", "userId"], queryField: "eventsByUserId")
{
  comments: Int
    @auth(
      rules: [
          { allow: private, operations: [read] },
          { allow: private, provider: iam, operations: [read, create, update] },
      ]
    )
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  userId: ID!
  description: String
  host: String
  parentId: ID
  radius: Float
  startDateTime: AWSDateTime!
  endDateTime: AWSDateTime!
  name: String
  location: LocationEvent
}

"""
This allows us to fill in the missing fields in the backend rather than letting the user do it. Applies when creating a new message.
"""
input CreateEventInput {
  description: String
  parentId: ID
  radius: Float
  startDateTime: AWSDateTime!
  endDateTime: AWSDateTime!
  name: String
  location: LocationEventInput
}

"""
This allows us to fill in the missing fields in the backend rather than letting the user do it. Applies when updating a message.
"""
input UpdateEventInput {
  description: String
  radius: Float
  name: String
}



"""
This is used for batch deletion of posts.
"""
input DeleteEventInput {
  createdAt: AWSDateTime!
  userId: String!
}